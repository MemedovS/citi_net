
#AgACAgIAAxkBAAIKY2b_lHTVZblVB47mxqK2_x0KWOpWAAL_3jEbqhj5S6QAAagEK3KgLQEAAwIAA20AAzYE
# from aiogram import Router, types, Bot
# from aiogram.filters import Command
# from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
# from aiogram.exceptions import TelegramAPIError
# from siti_bot.user_steps_manager import create_keyboard, save_step
#
# router = Router()
# # –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
# user_data = {}
# last_messages = {}
#
#
# async def delete_previous_message(bot: Bot, chat_id: int):
#     # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∏ —Ñ–æ—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏—è
#     if chat_id in last_messages:
#         photo_message_id, text_message_id = last_messages[chat_id]
#
#         if photo_message_id:
#             try:
#                 await bot.delete_message(chat_id=chat_id, message_id=photo_message_id)
#             except TelegramAPIError as e:
#                 print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–æ—Ç–æ: {e}")
#
#         if text_message_id:
#             try:
#                 await bot.delete_message(chat_id=chat_id, message_id=text_message_id)
#             except TelegramAPIError as e:
#                 print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞: {e}")
#
#         # –û—á–∏—â–∞–µ–º –∑–∞–ø–∏—Å–∏ –æ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
#         last_messages.pop(chat_id, None)
#
# async def send_welcome_message(bot: Bot, chat_id, username):
#     # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID
#     photo_file_id = 'AgACAgIAAxkBAAIJi2b_bm6v_PuBIT3Yo4CBzpVhPRazAAKp5TEbbC34S7rhAAGFjdT5AwEAAwIAA3gAAzYE'
#
#     try:
#         photo_message = await bot.send_photo(chat_id=chat_id, photo=photo_file_id)
#     except TelegramAPIError as e:
#         print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
#         photo_message = None
#
#     markup = InlineKeyboardMarkup(inline_keyboard=[
#         [InlineKeyboardButton(text="üöÄ Internet qo≈üulma üöÄ", callback_data="internet_qo≈üulma")],
#         [InlineKeyboardButton(text="üíº Tarifl…ôr", callback_data="Tarifl…ôr")],
#         [InlineKeyboardButton(text="üü¢ Biziml…ô …ôlaq…ô", callback_data="Biziml…ô_…ôlaq…ô")]
#     ])
#
#     # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID
#     welcome_message = f"üåü*{username}*üåü sizi internet…ô qo≈üulma portalƒ± salamlayƒ±r !"
#     welcome_message_sent = await bot.send_message(chat_id=chat_id, text=welcome_message, reply_markup=markup,
#                                                   parse_mode="Markdown")
#
#     # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ñ–æ—Ç–æ –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
#     return photo_message.message_id if photo_message else None, welcome_message_sent.message_id
#
# @router.message(Command("start"))
# async def handle_start_command(message: types.Message, bot: Bot):
#     await send_welcome_message(bot, message.chat.id, message.from_user.username)
#
#
# @router.callback_query(lambda c: c.data == "internet_qo≈üulma")
# async def internet_problems(callback: types.CallbackQuery, bot: Bot):
#     # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
#     #await delete_previous_message(bot, callback.message.chat.id)
#
#     buttons = [
#         InlineKeyboardButton(text="Kampaniyalar", callback_data="Kampaniyalar"),
#         InlineKeyboardButton(text="Onlayn qeydiyat", callback_data="Onlayn_qeydiyat"),
#         InlineKeyboardButton(text="üîô –í –Ω–∞—á–∞–ª–æ", callback_data="go_home")
#     ]
#     keyboard = create_keyboard(buttons)
#
#     # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID
#     new_message = await bot.send_message(
#         chat_id=callback.message.chat.id,
#         text="<b>‚úÖCityNet-i se√ßm…ôk √º√ß√ºn s…ôb…ôbl…ôr\n‚úÖY√ºks…ôk sur…ôt\n‚úÖ∆èv…ôzolunmaz xidm…ôt</b>",
#         reply_markup=keyboard, parse_mode="HTML"
#     )
#
#     # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–±–µ–∑ —Ñ–æ—Ç–æ)
#     last_messages[callback.message.chat.id] = (None, new_message.message_id)
#
#     await callback.answer()
#
# @router.callback_query(lambda c: c.data == "go_home")
# async def go_home(callback: types.CallbackQuery, bot: Bot):
#     # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (—Ñ–æ—Ç–æ –∏ —Ç–µ–∫—Å—Ç)
#     await delete_previous_message(bot, callback.message.chat.id)
#
#     # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
#     photo_message_id, new_message_id = await send_welcome_message(bot, callback.message.chat.id, callback.from_user.username)
#
#     # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ç–æ –∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
#     last_messages[callback.message.chat.id] = (photo_message_id, new_message_id)
#
#     await callback.answer()
# # –û—Å—Ç–∞–ª—å–Ω—ã–µ callback handlers —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –∫–Ω–æ–ø–∫–∏ "–í –Ω–∞—á–∞–ª–æ" –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
#
# @router.callback_query(lambda c: c.data == "Kampaniyalar")
# async def internet_Kampaniyalar(callback: types.CallbackQuery, bot: Bot):
#     await delete_previous_message(bot, callback.message.chat.id)
#     buttons = [
#         InlineKeyboardButton(text="Bir + Bir", callback_data="bir_bir"),
#         InlineKeyboardButton(text="Pulsuz cihazlar", callback_data="pulsuz_cihazlar"),
#         InlineKeyboardButton(text="Ulduzumla CityNetd…ôn 50% endirim!", callback_data="endirim_citynet"),
#         InlineKeyboardButton(text="Onlayn qeydiyat", callback_data="Onlayn_qeydiyat"),
#         InlineKeyboardButton(text="üîô –í –Ω–∞—á–∞–ª–æ", callback_data="go_home")
#     ]
#     keyboard = create_keyboard(buttons)
#
#     await bot.send_message(
#         chat_id=callback.from_user.id,
#         text="<b>‚úÖ CityNet-i se√ßm…ôk √º√ß√ºn s…ôb…ôbl…ôr\n‚úÖ Y√ºks…ôk sur…ôt\n‚úÖ ∆èv…ôzolunmaz xidm…ôt</b>",
#         reply_markup=keyboard,
#         parse_mode="HTML"
#     )
#
#     await callback.answer()
#
#
# # –î—Ä—É–≥–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–∞–∫–∂–µ –¥–æ–ª–∂–Ω—ã –≤–∫–ª—é—á–∞—Ç—å –∫–Ω–æ–ø–∫—É "–í –Ω–∞—á–∞–ª–æ"
#
#
# @router.callback_query(lambda c: c.data == "Onlayn_qeydiyat")
# async def online_registration(callback: types.CallbackQuery):
#     user_id = callback.from_user.id
#
#     await callback.message.answer("üìû <b>Salam! Z…ôhm…ôt olmasa,telefon n√∂mrasini qeyd edin:</b>", parse_mode="HTML")
#     user_data[user_id] = {"phone1": None}  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#
#     await callback.answer()
#
#
# @router.message(lambda message: message.from_user.id in user_data and user_data[message.from_user.id]["phone1"] is None)
# async def process_first_phone(message: types.Message):
#     user_id = message.from_user.id
#     user_data[user_id]["phone1"] = message.text  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–≤—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä
#
#     await message.answer("üìû <b>Z…ôhm…ôt olmasa, ikinci telefon n√∂mrasini qeyd edin:</b>", parse_mode="HTML")
#     user_data[user_id]["phone2"] = None  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Ç–æ—Ä–æ–π –Ω–æ–º–µ—Ä –∫–∞–∫ None
#
#
# @router.message(lambda message: message.from_user.id in user_data and user_data[message.from_user.id]["phone2"] is None)
# async def process_second_phone(message: types.Message):
#     user_id = message.from_user.id
#     user_data[user_id]["phone2"] = message.text  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ç–æ—Ä–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä
#
#     await message.answer("üè† <b>Z…ôhm…ôt olmasa, √ºnvanƒ± qeyd edin:</b>", parse_mode="HTML")
#     user_data[user_id]["address"] = None  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–¥—Ä–µ—Å –∫–∞–∫ None
#
#
# @router.message(
#     lambda message: message.from_user.id in user_data and user_data[message.from_user.id]["address"] is None)
# async def process_address(message: types.Message, bot: Bot):
#     user_id = message.from_user.id
#     user_data[user_id]["address"] = message.text  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å
#
#     await message.answer("üìù<b> Z…ôhm…ôt olmasa, ad soyad ata adƒ±nƒ± yazƒ±n (Fƒ∞O):</b>", parse_mode="HTML")
#     user_data[user_id]["full_name"] = None  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –§–ò–û –∫–∞–∫ None
#
#
# @router.message(
#     lambda message: message.from_user.id in user_data and user_data[message.from_user.id]["full_name"] is None)
# async def process_full_name(message: types.Message, bot: Bot):
#     user_id = message.from_user.id
#     user_data[user_id]["full_name"] = message.text  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è
#
#     await message.answer("üíº<b> Z…ôhm…ôt olmasa, tarifi sec…ôsin:\nüü¢ Tarif 25 ‚Çº\nüü¢ Tarif 31 ‚Çº\nüü¢ Tarif 33‚Çº</b>",
#                          parse_mode="HTML")
#     user_data[user_id]["tariff"] = None  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞—Ä–∏—Ñ –∫–∞–∫ None
#
#
# @router.message(lambda message: message.from_user.id in user_data and user_data[message.from_user.id]["tariff"] is None)
# async def process_tariff(message: types.Message, bot: Bot):
#     user_id = message.from_user.id
#     user_data[user_id]["tariff"] = message.text  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∞—Ä–∏—Ñ
#
#     # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
#     admin_chat_id = '5760671972'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –≤–∞—à–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
#     phone1 = user_data[user_id]["phone1"]
#     phone2 = user_data[user_id]["phone2"]
#     address = user_data[user_id]["address"]
#     full_name = user_data[user_id]["full_name"]
#     tariff = user_data[user_id]["tariff"]
#
#     await bot.send_message(
#         chat_id=admin_chat_id,
#         text=f"<b>üìù Yeni sorƒüu:\n"
#              f"üë§Fƒ∞O: {full_name}\n"
#              f"üìûTelefon 1: {phone1}\n"
#              f"üìûTelefon 2: {phone2}\n"
#              f"üè†√únvan: {address}\n"
#              f"üíºTarif: {tariff}</b>", parse_mode="HTML"
#     )
#
#     await message.answer("üîî <b>T…ô≈ü…ôkk√ºrl…ôr! Sizin sopƒüunuz qeyd…ô alƒ±ndƒ±.</b>", parse_mode="HTML")
#     del user_data[user_id]  # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
#
#
# @router.callback_query(lambda c: c.data == "bir_bir")
# async def internet_bir_bir(callback: types.CallbackQuery, bot: Bot):
#     await delete_previous_message(bot, callback.message.chat.id)
#     buttons = [
#         InlineKeyboardButton(text="Onlayn qeydiyat", callback_data="Onlayn_qeydiyat"),
#
#         InlineKeyboardButton(text="üîô –í –Ω–∞—á–∞–ª–æ", callback_data="go_home")
#     ]
#     keyboard = create_keyboard(buttons)
#     photo_file_id = 'AgACAgIAAxkBAAII5Gb-tRoOSw-jYVZaHzl1cSkEbFg_AALS4jEbbC34S29XRv8Z4p8bAQADAgADbQADNgQ'
#     caption_text = ("<b>‚úÖArtƒ±q CityNet xidm…ôtl…ôrin…ô yeni qo≈üulan \nv…ô m√∂vcud tarifl…ôrd…ôn birini se√ß…ôn m√º≈üt…ôril…ôr \n"
#                     "pulsuz router, modem  …ôld…ô ed…ô bil…ôrl…ôr.</b>")
#
#     await bot.send_photo(
#         chat_id=callback.from_user.id,
#         photo=photo_file_id,
#         caption=caption_text,
#         reply_markup=keyboard,
#         parse_mode="HTML"
#     )
#
#     await callback.answer()
#
#
# @router.callback_query(lambda c: c.data == "endirim_citynet")
# async def internet_endirim_citynet(callback: types.CallbackQuery, bot: Bot):
#     await delete_previous_message(bot, callback.message.chat.id)
#     buttons = [
#         InlineKeyboardButton(text="Onlayn qeydiyat", callback_data="Onlayn_qeydiyat"),
#
#         InlineKeyboardButton(text="üîô –í –Ω–∞—á–∞–ª–æ", callback_data="go_home")
#     ]
#     keyboard = create_keyboard(buttons)
#
#     photo_file_id = 'AgACAgIAAxkBAAII52b-tUV0vP4p8ECLCj88C_7jB-yyAALT4jEbbC34S5nWjnp5cG-xAQADAgADbQADNgQ'
#     caption_text = ("<b>‚úÖM√∂vcud m√º≈üt…ôril…ôrimiz \nv…ô yeni m√º≈üt…ôril…ôr \n"
#                     "Ulduzumla CityNetd…ôn 50% endirim!</b>")
#     await bot.send_photo(
#         chat_id=callback.from_user.id,
#         photo=photo_file_id,
#         caption=caption_text,
#         reply_markup=keyboard,
#         parse_mode="HTML"
#     )
#
#     await callback.answer()
#
#
#
# @router.callback_query(lambda c: c.data == "pulsuz_cihazlar")
# async def internet_pulsuz_cihazlar(callback: types.CallbackQuery, bot: Bot):
#     await delete_previous_message(bot, callback.message.chat.id)
#     # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
#     buttons = [
#         InlineKeyboardButton(text="Onlayn qeydiyat", callback_data="Onlayn_qeydiyat"),
#
#         InlineKeyboardButton(text="üîô –í –Ω–∞—á–∞–ª–æ", callback_data="go_home")
#     ]
#     keyboard = create_keyboard(buttons)
#
#     # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ñ–∞–π–ª–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–ª–∏ URL
#     photo_file_id = 'AgACAgIAAxkBAAIHhmb-TAnsryTcAeDhmrXhYN4GnoFoAAK03jEbbC3wS2JHBL_layfYAQADAgADeQADNgQ'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à file_id –∏–ª–∏ URL
#
#     # –¢–µ–∫—Å—Ç –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ –∫ —Ñ–æ—Ç–æ
#     caption_text = (
#         "<b>‚úÖH…ôm m√ºasir, h…ôm d…ô pulsuz cihazlar t…ôqdim edirik! \nQo≈üulma zamanƒ± tarif…ô uyƒüun olaraq bir ayƒ±n √∂d…ôni≈üini etdikd…ô\n"
#         "yeni n…ôsil Wi-Fi ruter v…ô TV-box siz…ô pulsuz t…ôqdim olunacaq.\nCityNet abun…ô√ßisi olduƒüunuz m√ºdd…ôtd…ô cihazlar √∂d…ôni≈üsizdir.</b>")
#
#     await bot.send_photo(
#         chat_id=callback.from_user.id,
#         photo=photo_file_id,
#         caption=caption_text,
#         reply_markup=keyboard,
#         parse_mode="HTML"
#     )
#     await callback.answer()
#
#
# @router.callback_query(lambda c: c.data == "Tarifl…ôr")
# async def issue_exists(callback: types.CallbackQuery, bot: Bot):
#     await delete_previous_message(bot, callback.message.chat.id)
#     buttons = [
#         InlineKeyboardButton(text="Onlayn qeydiyat", callback_data="Onlayn_qeydiyat"),
#
#         InlineKeyboardButton(text="üîô –í –Ω–∞—á–∞–ª–æ", callback_data="go_home")
#
#     ]
#     keyboard = create_keyboard(buttons)
#     # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ñ–∞–π–ª–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–ª–∏ URL
#     photo_file_id = 'AgACAgIAAxkBAAIJiWb_bdirRMYp9LRfd825U7sFRbr5AAKb5TEbbC34S_NuHWEzJdxlAQADAgADeAADNgQ'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à file_id –∏–ª–∏ URL
#
#     # –¢–µ–∫—Å—Ç –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ –∫ —Ñ–æ—Ç–æ
#     caption_text = (
#         "<b>‚úÖH…ôm m√ºasir, h…ôm d…ô pulsuz cihazlar t…ôqdim edirik! \nQo≈üulma zamanƒ± tarif…ô uyƒüun olaraq bir ayƒ±n √∂d…ôni≈üini etdikd…ô\n"
#         "yeni n…ôsil Wi-Fi ruter v…ô TV-box siz…ô pulsuz t…ôqdim olunacaq.\nCityNet abun…ô√ßisi olduƒüunuz m√ºdd…ôtd…ô cihazlar √∂d…ôni≈üsizdir.</b>")
#
#     await bot.send_photo(
#         chat_id=callback.from_user.id,
#         photo=photo_file_id,
#         caption=caption_text,
#         reply_markup=keyboard,
#         parse_mode="HTML"
#     )
#     await callback.answer()
#
#
# # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —à–∞–≥–æ–≤
# STEP_HANDLERS = {
#     "start": handle_start_command,
#     "internet_qo≈üulma": internet_problems,
#     "Tarifl…ôr": issue_exists,
#     "Kampaniyalar": internet_Kampaniyalar,
#     "bir_bir": internet_bir_bir,
#     "pulsuz_cihazlar": internet_pulsuz_cihazlar,
#     "endirim_citynet": internet_endirim_citynet,
# }
