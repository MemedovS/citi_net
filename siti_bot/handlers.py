# from aiogram import Router, types, Bot
# from aiogram.filters import Command
# from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
# from aiogram.exceptions import TelegramAPIError
# from siti_bot.user_steps_manager import create_keyboard, save_step, get_previous_step
#
# router = Router()
# # –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
# user_data = {}
# user_message_ids = {}
#
#
# async def delete_previous_message(bot: Bot, chat_id: int, message_id: int):
#     try:
#         await bot.delete_message(chat_id=chat_id, message_id=message_id)
#     except TelegramAPIError as e:
#         print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
#
#
# @router.message(lambda message: message.photo)
# async def get_image_id(message: types.Message):
#     file_id = message.photo[-1].file_id
#     await message.answer(f"file_id –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {file_id}")
#
#
# @router.callback_query(lambda c: c.data == "go_back")
# async def go_back(callback: types.CallbackQuery, bot: Bot):
#     user_id = callback.from_user.id
#     previous_step = get_previous_step(user_id)
#
#     if previous_step:
#         handler = STEP_HANDLERS.get(previous_step)
#         if handler:
#             if previous_step == "start":
#                 await handler(callback.message, bot)
#             else:
#                 await handler(callback, bot)
#         else:
#             await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥.")
#     else:
#         await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —à–∞–≥–æ–≤ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞.")
#
#
# async def send_welcome_message(bot: Bot, chat_id, username):
#     photo_file_id = 'AgACAgIAAxkBAAIJi2b_bm6v_PuBIT3Yo4CBzpVhPRazAAKp5TEbbC34S7rhAAGFjdT5AwEAAwIAA3gAAzYE'
#
#     try:
#         photo_message = await bot.send_photo(chat_id=chat_id, photo=photo_file_id)
#     except TelegramAPIError as e:
#         print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
#         photo_message = None
#
#     markup = InlineKeyboardMarkup(inline_keyboard=[
#         [InlineKeyboardButton(text="üöÄ Internet qo≈üulma üöÄ", callback_data="internet_qo≈üulma")],
#         [InlineKeyboardButton(text="üíº Tarifl…ôr", callback_data="Tarifl…ôr")],
#         [InlineKeyboardButton(text="üü¢ Biziml…ô …ôlaq…ô", callback_data="Biziml…ô_…ôlaq…ô")]
#     ])
#
#     welcome_message = f"üåü*{username}*üåü sizi internet…ô qo≈üulma portalƒ± salamlayƒ±r !"
#     welcome_message_sent = await bot.send_message(chat_id=chat_id, text=welcome_message, reply_markup=markup,
#                                                   parse_mode="Markdown")
#     return photo_message.message_id if photo_message else None, welcome_message_sent.message_id
#
#
# @router.message(Command("start"))
# async def handle_start_command(message: types.Message, bot: Bot):
#     save_step(message.from_user.id, "start")
#     await send_welcome_message(bot, message.chat.id, message.from_user.username)
#
#
# @router.callback_query(lambda c: c.data == "internet_qo≈üulma")
# async def internet_problems(callback: types.CallbackQuery, bot: Bot):
#     save_step(callback.from_user.id, "internet_qo≈üulma")
#
#     buttons = [
#         InlineKeyboardButton(text="Kampaniyalar", callback_data="Kampaniyalar"),
#         InlineKeyboardButton(text="Onlayn qeydiyat", callback_data="Onlayn_qeydiyat"),
#         InlineKeyboardButton(text="Qeriy…ô", callback_data="go_back")
#     ]
#     keyboard = create_keyboard(buttons)
#     await callback.message.edit_text(
#         "<b>‚úÖCityNet-i se√ßm…ôk √º√ß√ºn s…ôb…ôbl…ôr\n‚úÖY√ºks…ôk sur…ôt\n‚úÖ∆èv…ôzolunmaz xidm…ôt</b>",
#         reply_markup=keyboard, parse_mode="HTML"
#     )
#     await callback.answer()

#
# from aiogram import Router, types, Bot
# from aiogram.filters import Command
# from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
# from aiogram.exceptions import TelegramAPIError
# from siti_bot.user_steps_manager import create_keyboard, save_step, get_previous_step
#
# router = Router()
# ADMIN_ID = '5760671972'
# # –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
# user_data = {}
# user_message_ids = {}





from aiogram.exceptions import TelegramAPIError
from siti_bot.user_steps_manager import create_keyboard, save_step, get_previous_step
from aiogram import Router, types, Bot
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup


router = Router()
ADMIN_ID = '5760671972'

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
user_data = {}
user_message_ids = {}

class Form(StatesGroup):
    waiting_for_message = State()
###
async def delete_previous_message(bot: Bot, chat_id: int, message_id: int):
    try:
        await bot.delete_message(chat_id=chat_id, message_id=message_id)
    except TelegramAPIError as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

@router.callback_query(lambda c: c.data == "go_back")
async def go_back(callback: types.CallbackQuery, bot: Bot):
    user_id = callback.from_user.id
    previous_step = get_previous_step(user_id)

    if previous_step:
        handler = STEP_HANDLERS.get(previous_step)
        if handler:
            if previous_step == "start":
                await handler(callback.message, bot)
            else:
                await handler(callback, bot)
        else:
            await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥.")
    else:
        await callback.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —à–∞–≥–æ–≤ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞.")

@router.message(lambda message: message.photo)
async def get_image_id(message: types.Message):
    file_id = message.photo[-1].file_id
    await message.answer(f"file_id –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {file_id}")

async def send_welcome_message(bot: Bot, chat_id, username):
    photo_file_id = 'AgACAgIAAxkBAAIMR2cBTnexZRLcEq_1SF9E-UdutvNzAAKw5DEbqhgJSDLy6t4VdYXuAQADAgADeQADNgQ'

    try:
        photo_message = await bot.send_photo(chat_id=chat_id, photo=photo_file_id)
    except TelegramAPIError as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
        photo_message = None

    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üöÄ Internet qo≈üulma üöÄ", callback_data="internet_qo≈üulma")],
        [InlineKeyboardButton(text="üíº Tarifl…ôr", callback_data="Tarifl…ôr")],
        [InlineKeyboardButton(text="üü¢ Biziml…ô …ôlaq…ô", callback_data="Biziml…ô_…ôlaq…ô")]
    ])

    welcome_message = f"üåü*{username}*üåü sizi internet…ô qo≈üulma portalƒ± salamlayƒ±r !"
    welcome_message_sent = await bot.send_message(chat_id=chat_id, text=welcome_message, reply_markup=markup,
                                                  parse_mode="Markdown")
    return photo_message.message_id if photo_message else None, welcome_message_sent.message_id

@router.message(Command("start"))
async def handle_start_command(message: types.Message, bot: Bot):
    save_step(message.from_user.id, "start")
    await send_welcome_message(bot, message.chat.id, message.from_user.username)


@router.callback_query(lambda c: c.data == "internet_qo≈üulma")
async def internet_problems(callback: types.CallbackQuery, bot: Bot):
    save_step(callback.from_user.id, "internet_qo≈üulma")

    buttons = [
        InlineKeyboardButton(text="Kampaniyalar", callback_data="Kampaniyalar"),
        InlineKeyboardButton(text="Onlayn qeydiyat", callback_data="Onlayn_qeydiyat"),
        InlineKeyboardButton(text="Qeriy…ô", callback_data="go_back"),
        InlineKeyboardButton(text="üîô ∆èsas menyu", callback_data="go_home")
    ]
    keyboard = create_keyboard(buttons)
    photo_file_id = 'AgACAgIAAxkBAAIKbWb_lhpm7rTsB_W1xWUh65gMMbAtAAIH3zEbqhj5S6KWPEAwcpM_AQADAgADeAADNgQ'
    caption_text = (
        "<b>‚úÖH…ôm m√ºasir, h…ôm d…ô pulsuz cihazlar t…ôqdim edirik! \nQo≈üulma zamanƒ± tarif…ô uyƒüun olaraq bir ayƒ±n √∂d…ôni≈üini etdikd…ô\n"
        "yeni n…ôsil Wi-Fi ruter v…ô TV-box siz…ô pulsuz t…ôqdim olunacaq.\nCityNet abun…ô√ßisi olduƒüunuz m√ºdd…ôtd…ô cihazlar √∂d…ôni≈üsizdir.</b>")

    await bot.send_photo(
        chat_id=callback.from_user.id,
        photo=photo_file_id,
        caption=caption_text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(lambda c: c.data == "go_home")
async def go_home(callback: types.CallbackQuery, bot: Bot):
    user_id = callback.from_user.id
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —à–∞–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    save_step(user_id, "start")
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await send_welcome_message(bot, callback.message.chat.id, callback.from_user.username)
    await callback.answer()


@router.callback_query(lambda c: c.data == "Kampaniyalar")
async def internet_Kampaniyalar(callback: types.CallbackQuery, bot: Bot):
    save_step(callback.from_user.id, "Kampaniyalar")
    buttons = [
        InlineKeyboardButton(text="Bir + Bir", callback_data="bir_bir"),
        InlineKeyboardButton(text="Pulsuz cihazlar", callback_data="pulsuz_cihazlar"),
        InlineKeyboardButton(text="Ulduzumla CityNetd…ôn 50% endirim!", callback_data="endirim_citynet"),
        InlineKeyboardButton(text="Onlayn qeydiyat", callback_data="Onlayn_qeydiyat"),
        InlineKeyboardButton(text="Qeriy…ô", callback_data="go_back"),
        InlineKeyboardButton(text="üîô ∆èsas menyu", callback_data="go_home")
    ]
    keyboard = create_keyboard(buttons)
    photo_file_id = 'AgACAgIAAxkBAAIKdGb_lmC6G_wNFkoBAAFFQNeNYlXBeAACCt8xG6oY-UsZn1J16rN27QEAAwIAA3gAAzYE'
    caption_text = (
        "<b>‚úÖKampaniyalar \nM√∂vcud kampaniyalarla burada tanƒ±≈ü ola bil…ôrsiniz.\n</b>")
    await bot.send_photo(
        chat_id=callback.from_user.id,
        photo=photo_file_id,
        caption=caption_text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )

    await callback.answer()




@router.callback_query(lambda c: c.data == "Onlayn_qeydiyat")
async def online_registration(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    save_step(user_id, "Onlayn_qeydiyat")

    await callback.message.answer("üìû <b>Salam! Z…ôhm…ôt olmasa,telefon n√∂mrasini qeyd edin:</b>", parse_mode="HTML")
    user_data[user_id] = {"phone1": None}  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    await callback.answer()


@router.message(lambda message: message.from_user.id in user_data and user_data[message.from_user.id]["phone1"] is None)
async def process_first_phone(message: types.Message):
    user_id = message.from_user.id
    user_data[user_id]["phone1"] = message.text  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–≤—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä

    await message.answer("üìû <b>Z…ôhm…ôt olmasa, ikinci telefon n√∂mrasini qeyd edin:</b>", parse_mode="HTML")
    user_data[user_id]["phone2"] = None  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Ç–æ—Ä–æ–π –Ω–æ–º–µ—Ä –∫–∞–∫ None


@router.message(lambda message: message.from_user.id in user_data and user_data[message.from_user.id]["phone2"] is None)
async def process_second_phone(message: types.Message):
    user_id = message.from_user.id
    user_data[user_id]["phone2"] = message.text  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ç–æ—Ä–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä

    await message.answer("üè† <b>Z…ôhm…ôt olmasa, √ºnvanƒ± qeyd edin:</b>", parse_mode="HTML")
    user_data[user_id]["address"] = None  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–¥—Ä–µ—Å –∫–∞–∫ None


@router.message(
    lambda message: message.from_user.id in user_data and user_data[message.from_user.id]["address"] is None)
async def process_address(message: types.Message, bot: Bot):
    user_id = message.from_user.id
    user_data[user_id]["address"] = message.text  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–¥—Ä–µ—Å

    await message.answer("üìù<b> Z…ôhm…ôt olmasa, ad soyad ata adƒ±nƒ± yazƒ±n (Fƒ∞O):</b>", parse_mode="HTML")
    user_data[user_id]["full_name"] = None  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –§–ò–û –∫–∞–∫ None


@router.message(
    lambda message: message.from_user.id in user_data and user_data[message.from_user.id]["full_name"] is None)
async def process_full_name(message: types.Message, bot: Bot):
    user_id = message.from_user.id
    user_data[user_id]["full_name"] = message.text  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è

    await message.answer("üíº<b> Z…ôhm…ôt olmasa, tarifi sec…ôsin:\nüü¢ Tarif 25 ‚Çº\nüü¢ Tarif 31 ‚Çº\nüü¢ Tarif 33‚Çº</b>",
                         parse_mode="HTML")
    user_data[user_id]["tariff"] = None  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞—Ä–∏—Ñ –∫–∞–∫ None


@router.message(lambda message: message.from_user.id in user_data and user_data[message.from_user.id]["tariff"] is None)
async def process_tariff(message: types.Message, bot: Bot):
    user_id = message.from_user.id
    user_data[user_id]["tariff"] = message.text  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∞—Ä–∏—Ñ

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    admin_chat_id = ADMIN_ID  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –≤–∞—à–µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    phone1 = user_data[user_id]["phone1"]
    phone2 = user_data[user_id]["phone2"]
    address = user_data[user_id]["address"]
    full_name = user_data[user_id]["full_name"]
    tariff = user_data[user_id]["tariff"]

    await bot.send_message(
        chat_id=admin_chat_id,
        text=f"<b>üìù Yeni sorƒüu:\n"
             f"üë§Fƒ∞O: {full_name}\n"
             f"üìûTelefon 1: {phone1}\n"
             f"üìûTelefon 2: {phone2}\n"
             f"üè†√únvan: {address}\n"
             f"üíºTarif: {tariff}</b>", parse_mode="HTML"
    )

    await message.answer("üîî <b>T…ô≈ü…ôkk√ºrl…ôr! Sizin sorƒüunuz qeyd…ô alƒ±ndƒ±.</b>", parse_mode="HTML")
    del user_data[user_id]  # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞

@router.callback_query(lambda c: c.data == "bir_bir")
async def internet_bir_bir(callback: types.CallbackQuery, bot: Bot):
    save_step(callback.from_user.id, "bir_bir")

    buttons = [
        InlineKeyboardButton(text="Onlayn qeydiyat", callback_data="Onlayn_qeydiyat"),
        InlineKeyboardButton(text="Qeriy…ô", callback_data="go_back"),
        InlineKeyboardButton(text="üîô ∆èsas menyu", callback_data="go_home")
    ]
    keyboard = create_keyboard(buttons)
    photo_file_id = 'AgACAgIAAxkBAAII5Gb-tRoOSw-jYVZaHzl1cSkEbFg_AALS4jEbbC34S29XRv8Z4p8bAQADAgADbQADNgQ'
    caption_text = ("<b>‚úÖArtƒ±q CityNet xidm…ôtl…ôrin…ô yeni qo≈üulan \nv…ô m√∂vcud tarifl…ôrd…ôn birini se√ß…ôn m√º≈üt…ôril…ôr \n"
                    "pulsuz router, modem  …ôld…ô ed…ô bil…ôrl…ôr.</b>")

    await bot.send_photo(
        chat_id=callback.from_user.id,
        photo=photo_file_id,
        caption=caption_text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )

    await callback.answer()


@router.callback_query(lambda c: c.data == "endirim_citynet")
async def internet_endirim_citynet(callback: types.CallbackQuery, bot: Bot):
    save_step(callback.from_user.id, "endirim_citynet")

    buttons = [
        InlineKeyboardButton(text="Onlayn qeydiyat", callback_data="Onlayn_qeydiyat"),
        InlineKeyboardButton(text="Qeriy…ô", callback_data="go_back"),
        InlineKeyboardButton(text="üîô ∆èsas menyu", callback_data="go_home")
    ]
    keyboard = create_keyboard(buttons)

    photo_file_id = 'AgACAgIAAxkBAAII52b-tUV0vP4p8ECLCj88C_7jB-yyAALT4jEbbC34S5nWjnp5cG-xAQADAgADbQADNgQ'
    caption_text = ("<b>‚úÖM√∂vcud m√º≈üt…ôril…ôrimiz \nv…ô yeni m√º≈üt…ôril…ôr \n"
                    "Ulduzumla CityNetd…ôn 50% endirim!</b>")
    await bot.send_photo(
        chat_id=callback.from_user.id,
        photo=photo_file_id,
        caption=caption_text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )

    await callback.answer()


@router.callback_query(lambda c: c.data == "pulsuz_cihazlar")
async def internet_pulsuz_cihazlar(callback: types.CallbackQuery, bot: Bot):
    save_step(callback.from_user.id, "pulsuz_cihazlar")  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —à–∞–≥

    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    buttons = [
        InlineKeyboardButton(text="Onlayn qeydiyat", callback_data="Onlayn_qeydiyat"),
        InlineKeyboardButton(text="Qeriy…ô", callback_data="go_back") , # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        InlineKeyboardButton(text="üîô ∆èsas menyu", callback_data="go_home")
    ]
    keyboard = create_keyboard(buttons)

    # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ñ–∞–π–ª–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–ª–∏ URL
    photo_file_id = 'AgACAgIAAxkBAAIHhmb-TAnsryTcAeDhmrXhYN4GnoFoAAK03jEbbC3wS2JHBL_layfYAQADAgADeQADNgQ'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à file_id –∏–ª–∏ URL

    # –¢–µ–∫—Å—Ç –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ –∫ —Ñ–æ—Ç–æ
    caption_text = (
        "<b>‚úÖH…ôm m√ºasir, h…ôm d…ô pulsuz cihazlar t…ôqdim edirik! \nQo≈üulma zamanƒ± tarif…ô uyƒüun olaraq bir ayƒ±n √∂d…ôni≈üini etdikd…ô\n"
        "yeni n…ôsil Wi-Fi ruter v…ô TV-box siz…ô pulsuz t…ôqdim olunacaq.\nCityNet abun…ô√ßisi olduƒüunuz m√ºdd…ôtd…ô cihazlar √∂d…ôni≈üsizdir.</b>")

    await bot.send_photo(
        chat_id=callback.from_user.id,
        photo=photo_file_id,
        caption=caption_text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )


@router.callback_query(lambda c: c.data == "Tarifl…ôr")
async def issue_exists(callback: types.CallbackQuery, bot: Bot):
    save_step(callback.from_user.id, "Tarifl…ôr")  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —à–∞–≥

    buttons = [
        InlineKeyboardButton(text="Onlayn qeydiyat", callback_data="Onlayn_qeydiyat"),
        InlineKeyboardButton(text="Qeriy…ô", callback_data="go_back"),
        InlineKeyboardButton(text="üîô ∆èsas menyu", callback_data="go_home")

    ]
    keyboard = create_keyboard(buttons)
    # –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ñ–∞–π–ª–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –∏–ª–∏ URL
    photo_file_id = 'AgACAgIAAxkBAAIMOmcBR_POjhKBrH2ulp9J9yW296jrAAJq5DEbqhgJSKZCV7JxIb37AQADAgADeQADNgQ'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à file_id –∏–ª–∏ URL

    # –¢–µ–∫—Å—Ç –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ –∫ —Ñ–æ—Ç–æ
    caption_text = (
        "<b>‚úÖH…ôm m√ºasir, h…ôm d…ô pulsuz cihazlar t…ôqdim edirik! \nQo≈üulma zamanƒ± tarif…ô uyƒüun olaraq bir ayƒ±n √∂d…ôni≈üini etdikd…ô\n"
        "yeni n…ôsil Wi-Fi ruter v…ô TV-box siz…ô pulsuz t…ôqdim olunacaq.\nCityNet abun…ô√ßisi olduƒüunuz m√ºdd…ôtd…ô cihazlar √∂d…ôni≈üsizdir.</b>")

    await bot.send_photo(
        chat_id=callback.from_user.id,
        photo=photo_file_id,
        caption=caption_text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )




# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "Biziml…ô_…ôlaq…ô"
@router.callback_query(lambda c: c.data == "Biziml…ô_…ôlaq…ô")
async def contact_admin(callback: types.CallbackQuery, state: FSMContext,bot: Bot):
    await callback.message.answer("<b>‚ùóÔ∏èüìùSiz mesajƒ±nƒ±zƒ± yaza bil…ôrsiniz:\nüìû+994503275452</b>",parse_mode="HTML")

    # –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    await state.set_state(Form.waiting_for_message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è
@router.message()  # –£–±–∏—Ä–∞–µ–º 'state' –∏–∑ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞
async def handle_message(message: types.Message, state: FSMContext,bot: Bot):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –Ω—É–∂–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    current_state = await state.get_state()
    if current_state == Form.waiting_for_message.state:
        # –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        await bot.send_message(ADMIN_ID, f"<b>‚úÖYeni mesaj:\n\n{message.text}</b>", parse_mode="HTML")

        await message.answer("<b>‚úÖMesajƒ±nƒ±z g√∂nd…ôrildi!</b>", parse_mode="HTML")

        # –û—á–∏—Å—Ç–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ (—Å–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ)
        await state.clear()











# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —à–∞–≥–æ–≤
STEP_HANDLERS = {
    "start": handle_start_command,
    "internet_qo≈üulma": internet_problems,
    "Tarifl…ôr": issue_exists,
    "Kampaniyalar": internet_Kampaniyalar,
    "bir_bir": internet_bir_bir,
    "pulsuz_cihazlar": internet_pulsuz_cihazlar,
    "endirim_citynet": internet_endirim_citynet,
}
